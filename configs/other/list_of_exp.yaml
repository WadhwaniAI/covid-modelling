# Driver config has three parts:
#   configs: list of base config names
#   base: condensed partial config with choices used across all base configs
#   specific: condensed partial config with choices specific to each base config

# Each terminal element has the structure [pattern, choices, select]
# pattern: the method of specification of the choices
#   - list: list of choices
#   - repeat: value, num_repetitions
#   - range: start, stop (exclusive), step
#   - date_range: start, stop, periods, freq (specify EXACTLY three as per pd.date_range)
# choices: representation of values using one of the above patterns
# select: if True, produce combinations for this element else use default value from base config

# Use generate_config (utils/generic/config.py) to convert choices to the full list of values as specified by pattern.
# Further use generate_combinations (utils/generic/config.py) to generate a list of configs of all combinations.
# NOTE: Any terminal element which is a list will be split into choices.

# Example: terminal element -> [range, [500, 2000, 500], TRUE]
#          generate_config -> [500, 1000, 1500]
#          generate_combinations -> Three configs each with one value

configs: [default]
base:
  fitting:
    fitting_method_params:
      algo: [list, [tpe, rand], FALSE]
      num_evals: [repeat, [3000, 3], FALSE]
    split:
      train_period: [range, [6, 45, 3], FALSE]
      val_period: [range, [2, 7, 1], FALSE]
    loss:
      loss_method: [list, [mape, rmse, rmse_log], FALSE]
specific:
  default:
    fitting:
      split:
        start_date: [date_range, [2020-03-29, null, 1, D], FALSE]
